# -*- coding: utf-8 -*-
"""Oilspill_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qWILbk_V-Dk_4NA1FbBqm-7hGG6ksbc9
"""

from google.colab import drive
drive.mount('/content/drive')

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import RMSprop
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import os

# Data generators
train_datagen = ImageDataGenerator(
    rescale=1/255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = ImageDataGenerator(rescale=1/255)

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model

# Define data generators
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

train_dataset = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/Google solution challenge/Train',
    target_size=(224, 224),  # ResNet50 input size
    batch_size=20,
    class_mode='binary'
)

test_dataset = test_datagen.flow_from_directory(
    '/content/drive/MyDrive/Google solution challenge/Test',
    target_size=(224, 224),  # ResNet50 input size
    batch_size=20,
    class_mode='binary'
)

# Load the pre-trained ResNet50 model
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze the layers in the pre-trained model
for layer in base_model.layers:
    layer.trainable = False

# Add custom layers for binary classification
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(512, activation='relu')(x)
predictions = Dense(1, activation='sigmoid')(x)

# Combine the base model with custom layers
oil_model = Model(inputs=base_model.input, outputs=predictions)

# Compile the model
oil_model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = oil_model.fit(train_dataset, steps_per_epoch=9, epochs=20, validation_data=test_dataset)

# Save the model
oil_model.save('/content/drive/MyDrive/Google solution challenge/models/oil_spill_resnet.h5')

from tensorflow.keras.models import load_model
import os
import tensorflow as tf
import matplotlib.pyplot as plt

loaded_model = load_model('/content/drive/MyDrive/Google solution challenge/models/oil_spill_resnet.h5')

dir_path = '/content/drive/MyDrive/Google solution challenge/temp clear water'

results = []

# List only the first 10 images
for i, image_name in enumerate(os.listdir(dir_path)[:31]):
    print("\n ---------------------Image No.", i+1, "--------------------")
    img_path = os.path.join(dir_path, image_name)
    img = tf.keras.preprocessing.image.load_img(img_path, target_size=(224, 224))
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0)
    prediction = loaded_model.predict(img_array)

    plt.imshow(img)
    plt.show()
    print(prediction)


    if prediction < 0.8:

        result = "Clear water"
    else:

        result = " Oil spill Present"
    print(result)

    results.append([image_name, result])

print(results)



from google.colab import files
from tensorflow.keras.models import load_model
import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
import io

# Load the pre-trained model
loaded_model = load_model('/content/drive/MyDrive/Google solution challenge/models/oil_spill_resnet.h5')

# Upload your image
uploaded = files.upload()

# Process uploaded image
for image_name, image_data in uploaded.items():
    print("\n--------------------- Image ---------------------")
    img = Image.open(io.BytesIO(image_data))
    img = img.resize((200, 200))
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    plt.imshow(img)
    plt.show()
    prediction = loaded_model.predict(img_array)
    print(prediction)

    if prediction < 0.8:
        result = "Clear water"
    else:
        result = "Oil spill Present"
    print("Prediction:", result)